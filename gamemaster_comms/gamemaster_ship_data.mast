# This file will be used for any general modifications to ship data, e.g. roles, name, hull_id, etc.

# TODO: Duplicate this, but for black holes and monsters
//comms/gamemaster/selected/set if has_any_role(COMMS_SELECTED_ID, "ship,station") and has_role(COMMS_ORIGIN_ID, "gamemaster")
    gui_sub_task_schedule(properties_ship_data, {"obj":COMMS_SELECTED_ID})
    +^1[$gamemaster]"Back" //comms
    +[$gamemaster]"Confirm New Name" {"ship":COMMS_SELECTED_ID}:
        name = gui_get_variable("gm_ship_name")
        obj = to_object(ship)
        if obj is not None:
            obj.name = name
            obj.data_set.set("name_tag", name)            
    if not has_role(COMMS_SELECTED_ID, "surrendered"):
        +[$gamemaster]"Force Surrender":
            add_role(COMMS_SELECTED_ID, "surrendered")
            remove_role(COMMS_SELECTED_ID, "raider") # Why do this?
            set_data_set_value(COMMS_SELECTED_ID, "surrender_flag", 1)
            fleet_remove_ship(COMMS_SELECTED_ID)
        if has_role(COMMS_SELECTED_ID, "never_surrender"):
            +[$gamemaster]"Allow Surrender":
                remove_role(COMMS_SELECTED_ID, "never_surrender")
        else:
            +[$gamemaster]"Prevent Surrender":
                add_role(COMMS_SELECTED_ID, "never_surrender")
    else:
        +[$gamemaster]"Force Unsurrender":
            task_schedule(gm_force_unsurrender, {"ship":COMMS_SELECTED_ID})
    +[$gamemaser]"Shields" //comms/gamemaster/selected/set/shields

=== gm_force_unsurrender
metadata: ```
ship:
brain:
  SEQ:
    - ai_fleet_init_blackboard
    - SEL:
        - ai_fleet_chase_best_anger
        - label: ai_fleet_chase_roles
          data:
            test_roles: station
        - label: ai_fleet_chase_roles
          data:
            test_roles: __player__
        # No player nearby, chase nearest enemy
        - label: ai_fleet_chase_roles
          data:
            test_roles: ship
        # Nothing close find a station
        - label: ai_fleet_chase_roles
          data:
            use_arena: false
            test_roles: station
        # No Stations go for any player
        - label: ai_fleet_chase_roles
          data:
            use_arena: false
            test_roles: __player__
    - ai_fleet_calc_forward_vector
    - ai_fleet_scatter_formation
```
    yield fail if ship is None
    remove_role(ship, "surrendered")
    add_role(ship, "raider")
    set_data_set_value(ship, "surrender_flag", 0)
    obj = to_object(ship)
    fleet_obj = fleet_spawn(Vec3(obj.pos), "ship_fleet")
    set_inventory_value(ship, "my_fleet_id", fleet_obj.id)
    link(fleet_obj.id,"ship_list", ship)
    brain_add(fleet_obj.id, brain, None, 0, None)
    yield success

=== properties_ship_data
# metadata: ```
# ship: None
# ```
    if obj is None:
        yield fail
    ship = to_object(obj)
    if ship is None:
        yield fail

    gm_ship_name = gui_get_variable("gm_ship_name", ship.name)
    gui_set_variable("gm_ship_name", gm_ship_name)
    gm_ship_side = gui_get_variable("gm_ship_side", ship.side)
    gui_set_variable("gm_ship_side", gm_ship_side)
    sides = sorted(list(side_keys_set()))
    side_list = ",".join(sides)
    p = """
    Name: 'gui_input("desc:count;",var="gm_ship_name")'
    Side: 'gui_drop_down("$text:{gm_ship_side};list:{side_list}", var="gm_ship_side")'
    """
    # This is gui variable, this is why we need client scope!
    gui_properties_set(p)
    on change gui_get_variable("gm_ship_side"):
        side = gui_get_variable("gm_ship_side")
        ship.set_side(side)
        # TODO: Should sbs_utils Agent.set_side() also change this blob data? Probably not, since not all Agents have blob info?
        ship.data_set.set("hull_side", side)
        side_set_ship_allies_and_enemies(ship)
    yield idle


#region Shield Manipulation
//comms/gamemaster/selected/set/shields
    # gui_sub_task_schedule(properties_gm_shield_values)
    +[$gamemaster]"Add 20 Shields" gm_add_shield_value {"ship": COMMS_SELECTED_ID, "shield_arc": -1, "value": 20}
    +[$gamemaster]"Remove 20 Shields" gm_add_shield_value {"ship": COMMS_SELECTED_ID, "shield_arc": -1, "value": -20}
    +[$gamemaster]"Refill All Shields" gm_refill_shield_value {"ship":COMMS_SELECTED_ID, "refill":True}
    +[$gamemaster]"Remove All Shields" gm_refill_shield_value {"ship":COMMS_SELECTED_ID, "refill":False}

# WIP Properties list usage.
# === properties_gm_shield_values
# metadata: ```
# ship:
# ```
#     yield fail if ship is None
#     props = """
# Shields:
# """
#     blob = to_blob(ship)
#     yield fail if blob is None
#     arcs = blob.get("shield_count",0)
#     for a in range(0,arcs):
#         cur = blob.get("shield_val",a)
#         sMax = blob.get("shield_max_val",a)
#         gui_set_variable(f"gm_shield_current_{a}",cur)
#         gui_set_variable(f"gm_shield_max_{a}",sMax)
#         # gm_shield_current = gui_get_variable(f"gm_shield_current_{a}",0)
#         # gm_shield_max = gui_get_variable(f"gm_shield_max_{a}",0)
#         # Indentation apparently matters for this...
#         props += """
#     "{a}":
#         "Current": 'gui_input("desc:current;", var="gm_shield_current_{a}")'
#         "Max": 'gui_input("desc:value;",var="gm_shield_max_{a}")'
#     """
        
#     # print(props)
#     gui_properties_set(props)
#     # blob.set(Key, Value, Index)
#     for a in range(0, arcs):
#         on change gui_get_variable("gm_shield_current_{a}"):
#             newVal = gui_get_variable("gm_shield_current_{a}")
#             print(newVal)
#             blob.set("shield_val",newVal,a)
#         on change gui_get_variable("gm_shield_max_{a}"):
#             newVal = gui_get_variable("gm_shield_max_{a}")
#             print(newVal)
#             blob.set("shield_max_val",newVal,a)
#     yield idle

=== gm_refill_shield_value
" Refill the target's shields, if `refill` is true, or empty them completely if false. 
metadata: ```
ship:
refill: true
```
    yield fail if ship is None
    blob = to_blob(ship)
    arcs = blob.get("shield_count", 0)
    for x in range(0,arcs):
        val = blob.get("shield_val", x)
        if refill:
            maxVal = blob.get("shield_max_val",x)
            blob.set("shield_val",maxVal,x)
        else:
            # Empty the shield value
            blob.set("shield_val",0,x)
    yield success

=== gm_add_shield_value
metadata: ```
ship:
# if shield_arc == -1, then add value to all shield arcs
shield_arc: 0
value: 20
```
    yield fail if ship is None
    blob = to_blob(ship)
    if shield_arc == -1:
        count = blob.get("shield_count", 0)
        for x in range(0,count):
            val = blob.get("shield_val", x)
            maxVal = blob.get("shield_max_val",x)
            if val is None or maxVal is None:
                print(f"shield val for index {x} is None")
                continue
            newVal = val + value
            if newVal > maxVal:
                newVal = maxVal
            if newVal < 0:
                newVal = 0
            blob.set("shield_val", newVal, x)
    else:
        val = blob.get("shield_val", shield_arc)
        maxVal = blob.get("shield_max_val",shield_arc)
        if val is not None or maxVal is None:
            print(f"shield val for index {shield_arc} is None")
            yield fail
        newVal = val + value
        if newVal > maxVal:
            newVal = maxVal
        if newVal < 0:
            newVal = 0
        blob.set("shield_val", newVal, shield_arc)
    yield success
#endregion Shield Manipulation



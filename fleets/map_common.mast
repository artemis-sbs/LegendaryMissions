################
## common code for different map type

//signal/game_started
    start_npc_cag()

=========== spawn_friendly_npc ===========

    print(f"World Select: {WORLD_SELECT.path}")
    if WORLD_SELECT.path == "deep_strike":
        FRIENDLY_SELECT = "none"

    match FRIENDLY_SELECT:
        case "max":
            count = 10
        case "lots":
            count = 8
        case "some":
            count = 5
        case "few":
            count = 3
        case "none":
            # no civilian or friendly npcs
            # But added eyes
            ->END

    spawn_pos = Vec3(0,0,0)
    stations_friendly = to_object_list(role("tsn")  & role("station"))
    for x while count>0:
        # OK add this ship
        if len(stations_friendly) > 0:
            so = random.choice(stations_friendly)
            spawn_pos = so.pos
            spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)

        data = {"START_X": spawn_pos.x, "START_Y": spawn_pos.y, "START_Z": spawn_pos.z}
        prefab_spawn(prefab_npc_defender, data)
        count -= 1


---- civilians

    civilian_count = 0
    match FRIENDLY_SELECT:
        case "max":
            civilian_count = 4
        case "lots":
            civilian_count = 3
        case "some":
            civilian_count = 2
        case "few":
            civilian_count = 1
        case "none":
            ->END

    # grab the ship data for all ships on TSN side
    
    # test have more
    if len(stations_friendly) > 0:
        civilian_count = random.randint(civilian_count,civilian_count*len(stations_friendly))

    prefabs = [prefab_npc_civilian_cargo, prefab_npc_civilian_science, prefab_npc_civilian_luxury_liner, prefab_npc_civilian_transport]
    for count in range(civilian_count):
        #
        prefab = random.choice(prefabs)
        #
        if len(stations_friendly) > 0:
            so = random.choice(stations_friendly)
            spawn_pos = so.pos
            spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)

        data = {"START_X": spawn_pos.x, "START_Y": spawn_pos.y, "START_Z": spawn_pos.z}
        prefab_spawn(prefab, data)

    ->END


====== spawn_players =======
    #
    # No longer "Spawn" but move an remove
    #
    c=0
    first = True

    #test_func(3)


    await delay_sim(0)
    spawn_pos = Vec3(0,0,0)
    player_ships = to_object_list(role("default_player_ship"))
    #------------------------------------------------------------------------------------------------------------
    for player_ship in player_ships:
        side = player_ship.side
        stations_friendly = to_object_list(role(side)  & role("station"))

        if c>= PLAYER_COUNT:
            # make sure the id is cleared dry docked ships
            player_ship.art_id = "invisible"
            player_ship.remove_role("__player__")
            player_ship.remove_role("tsn")
            player_ship.side = "unused"
            # Delay the delete
            task_schedule(player_ships_remove_unused, {"_ship_id": player_ship.id})
            continue

        # Reset to default blob in case art work changed
        name = player_ship.name
        sbs.player_ship_setup_defaults(player_ship.engine_object)
        sbs.player_ship_setup_from_data(player_ship.engine_object)
        player_ship.name = name


        if len(stations_friendly) > 0:
            so = random.choice(stations_friendly)
            spawn_pos = so.pos
            spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)
            player_ship.pos = spawn_pos
        c+=1
        if first:
            assign_client_to_ship(0,to_id(player_ship))
            first = False

        role_ally_add(player_ship, "civ")
        test = player_ship.data_set.get("ally_list", 0)
        # 
        # schedule and set friendly eyes
        # link or unlink extra_scan_source
        #
        friendly_eyes = role_allies(player_ship)  & (role("station")|role("defender"))
        link(player_ship, "extra_scan_source", friendly_eyes)

        #player_ship_update_friendly(player_ship, stations_friendly, True)

    shared players_cleaned = True
    ->END

==== default_player_friendly_eyes
" Schedule this label if all player ships are on the same side and should share scan data.  
" If `players` isn't specified in the metadata, then it will use `role('__player__')`. 
metadata: ```
players:
```
    if players is None:
        players = role('__player__')
    for p in players:
        for o in players:
            if p != o:
                link(p, "extra_scan_source", o)
    ->END
    
==== player_ships_remove_unused
    sbs.delete_object(_ship_id)
    ->END

        

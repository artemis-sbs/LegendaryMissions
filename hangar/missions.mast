

//spawn if has_roles(SPAWNED_ID, "tsn,fighter")
    set_inventory_value(SPAWNED_ID, "briefing", "This is the start of a fighter mission")
    CRAFT_ID = SPAWNED_ID
    jump hangar_schedule_mission
    ->END


//spawn if has_roles(SPAWNED_ID, "tsn,shuttle")
    set_inventory_value(SPAWNED_ID, "briefing", "This is the start of a shuttle mission")
    CRAFT_ID = SPAWNED_ID
    jump hangar_schedule_mission

======== hangar_schedule_mission
        
---- wait_for_game_started
    if not GAME_STARTED:
        await delay_sim(3)
        jump wait_for_game_started
    ->END if to_object(CRAFT_ID) is None


    docked_with = get_dedicated_link(CRAFT_ID, "home_dock")

    if random.randint(0,4) == 2:
        jump story_mission_investigate
    else:
        jump story_mission_deliver_to_player if has_role(docked_with, "station")
        jump story_mission_deliver_to_station if has_role(docked_with, "__player__")

    set_inventory_value(CRAFT_ID, "briefing", "No missions set")

    ->END


=====  story_mission_deliver_to_player =====
    # CRAFT_ID assumed

    so = to_object(CRAFT_ID)
    ->END if so is None
    side = so.side
    so = None # no longer needed

    mission_types = ["ammunition"] #, "upgrade"]
    mission_type = random.choice(range(len(mission_types)))

    # get player on my side, and exclude me
    OBJECTIVE_ID = random_id(role(get_side(CRAFT_ID)) & role("__player__") - to_set(CRAFT_ID))

    jump story_mission_deliver_ammo if mission_type ==0

    ->END


=====  story_mission_deliver_ammo =====
    # Expects CRAFT_ID and OBJECTIVE_ID
    #
    # The remaining AI for the player is docking
    #
    sel_o = to_object(OBJECTIVE_ID)
    ->END if sel_o is None


    origin_o = to_object(CRAFT_ID)
    ->END if origin_o is None

    _torp_types = sel_o.data_set.get("torpedo_types_available",0)

    # 
    # 
    #
    if  _torp_types is None or _torp_types == "":
        print("torpedo mission not needed")
        ->END



    _torp_types = _torp_types.split(",")
    # remove blanks
    _torp_types = [x for x in _torp_types if x]
    torp_type = random.randint(0,len(_torp_types)-1)
    amount = random.randint(2, max(3, 6-torp_type))
    torp_name = _torp_types[torp_type].strip()


    set_inventory_value(CRAFT_ID, "briefing", f"Deliver {torp_name} to {sel_o.name}^Take the {amount} {torp_name} and delivery them to {sel_o.name}.")
    mission_objective = f"Deliver {torp_name} to {sel_o.name}"
    set_inventory_value(CRAFT_ID, "current_objective", f"Deliver {torp_name} to {sel_o.name}")
    mission_objective = f"delivered {amount} {torp_name} to {sel_o.name}"

    sel_o = None # free

------- travel -------

    await delay_sim(seconds=5)
    # END tesk if things no longer exist
    ->END if to_object(CRAFT_ID) is None # If in standby it won't 'exist'
    ->END if not object_exists(OBJECTIVE_ID)

    # Must be docked
    jump travel if not has_role(CRAFT_ID, "standby")
    # must be docked at expected location
    jump travel if get_dedicated_link(CRAFT_ID, "home_dock") != OBJECTIVE_ID

    # Get the current load
    current_load = get_data_set_value(OBJECTIVE_ID, f"{torp_name}_NUM", 0)
    if current_load is None:
        current_load = 0

    # Add the torps
    set_data_set_value(OBJECTIVE_ID, f"{torp_name}_NUM", amount + current_load, 0)

    hangar_objective_complete(CRAFT_ID, OBJECTIVE_ID, mission_objective)



    jump hangar_schedule_mission

    ->END

=====  story_mission_deliver_to_station =====
    # CRAFT_ID assumed

    so = to_object(CRAFT_ID)
    ->END if so is None
    side = so.side
    so = None # no longer needed

    mission_types = ["ammunition"] #, "upgrade"]
    mission_type = random.choice(range(len(mission_types)))

    # get player on my side, and exclude me
    OBJECTIVE_ID = random_id(role(get_side(CRAFT_ID)) & role("station") - to_set(CRAFT_ID))

    jump story_mission_deliver_life_form if mission_type ==0

    ->END



=====  story_mission_deliver_life_form =====
    # Expects CRAFT_ID and OBJECTIVE_ID

    sel_o = to_object(OBJECTIVE_ID)
    ->END if sel_o is None

    life_forms = ["Admiral Xeno Nakada", "Prince Zayne Alcantar", "Admiral Tharay sh'Firri", "Skarran delegate", "Torgoth delegate"]

    life_form_name = random.choice(life_forms)

    set_inventory_value(CRAFT_ID, "briefing", f"Deliver {life_form_name} to {sel_o.name}^Take the {life_form_name} and delivery them to {sel_o.name}.")
    mission_objective =  f"Deliver {life_form_name} to {sel_o.name}"
    set_inventory_value(CRAFT_ID, "current_objective", f"Deliver {life_form_name} to {sel_o.name}")

    sel_o = None # free

----- travel

    await delay_sim(seconds=5)

    # END task if things no longer exist
    ->END if to_object(CRAFT_ID) is None # If in standby it won't 'exist'
    ->END if not object_exists(OBJECTIVE_ID)


    # Must be docked
    jump travel if not has_role(CRAFT_ID, "standby")
    # must be docked at expected location
    jump travel if get_dedicated_link(CRAFT_ID, "home_dock") != OBJECTIVE_ID

    # Get the current load
    hangar_objective_complete(CRAFT_ID, OBJECTIVE_ID, mission_objective)


    jump hangar_schedule_mission

    ->END


=====  story_mission_investigate =====
    # CRAFT_ID assumed

    so = to_object(CRAFT_ID)
    ->END if so is None
    side = so.side

    # get player on my side, and exclude me
    OBJECTIVE_ID = random_id(role(get_side(CRAFT_ID)) & role("__player__") - to_set(CRAFT_ID))
    
    set_inventory_value(CRAFT_ID, "briefing", f"Mission patrol stations. Visit all of the stations then dock.")

---- wait_for_launch
    so = to_object(CRAFT_ID)
    if has_role(CRAFT_ID, "standby"):
        await delay_sim(3)
        jump wait_for_launch


--- rebuild
    
    so = to_object(CRAFT_ID)
    ->END if so is None


    stations = set(role("station"))
    idx = 0
    visit = ""
    for st in stations:
        st_obj = to_object(st)
        continue if st_obj is None
        visit += st_obj.name
        visit += "+"
        pos= st_obj.engine_object.pos
        so.data_set.set("waypoint_x_array", pos.x, idx)
        so.data_set.set("waypoint_y_array", pos.y, idx)
        so.data_set.set("waypoint_z_array", pos.z, idx)
        so.data_set.set("waypoint_name_array", st_obj.name, idx)
        idx += 1
    so.data_set.set("waypoint_count", idx, 0)

    if len(stations)!=0:
        client_id = get_inventory_value(CRAFT_ID, "client_id", client_id)
        comms_broadcast(client_id, f"waypoints: {visit}")
    else:
        # Get the current load
        hangar_objective_complete(CRAFT_ID, OBJECTIVE_ID, "All patrol points have been visited")
        ->END


    so = None # no longer needed

---- loop 

    await delay_sim(seconds=5)

    so = to_object(CRAFT_ID)
    ->END if so is None
    jump loop if has_role(CRAFT_ID, "standby")

    near_station = broad_test_around(CRAFT_ID, 1000, 1000, 0xF0) & stations
    jump loop if len(near_station) == 0

    for st in near_station:
        stations.discard(st)
        sto = to_object(st)
        if sto:
            client_id = get_inventory_value(CRAFT_ID, "client_id", client_id)
            comms_broadcast(client_id, f"waypoint reached: {sto.name}")


    jump rebuild
    ->END

@map/single_front "Single Front"
"Bases will be lined up along the right edge of the sector,
" and the enemies will enter from the left. This layout makes
" a much longer game, with long travel distances. The bases are far from enemies, but more isolated.
metadata:``` yaml
Properties:
  Main:
    Player Ships: 'gui_int_slider("$text:int;low: 1.0;high:8.0;", var= "PLAYER_COUNT")'
    Difficulty: 'gui_int_slider("$text:int;low: 1.0;high:11.0;", var= "DIFFICULTY")'
  Map:
    Terrain: 'gui_drop_down("$text: {TERRAIN_SELECT};list: none, few, some, lots, max",var="TERRAIN_SELECT")'
    Lethal Terrain: 'gui_drop_down("$text: {LETHAL_SELECT};list: none, few, some, lots, max", var="LETHAL_SELECT")'
    Friendly Ships: 'gui_drop_down("$text: {FRIENDLY_SELECT};list: none, few, some, lots, max", var="FRIENDLY_SELECT")'
    Monsters: 'gui_drop_down("$text: {MONSTER_SELECT};list: none, few, some, lots, max", var="MONSTER_SELECT")'
    Upgrades: 'gui_drop_down("$text: {UPGRADE_SELECT};list: none, few, some, lots, max", var= "UPGRADE_SELECT")'
    Time Limit: 'gui_input("desc: Minutes;", var="GAME_TIME_LIMIT")'
```


    terrain_value = terrain_to_value(TERRAIN_SELECT)
    lethal_value =  terrain_to_value(LETHAL_SELECT)
    friendly_value = terrain_to_value(FRIENDLY_SELECT)
    monster_value = terrain_to_value(MONSTER_SELECT)
    upgrade_value = terrain_to_value(UPGRADE_SELECT)

    #------------------------------------------------------------------------------------------------------------


    terrain_spawn_stations(DIFFICULTY, lethal_value)
    await task_schedule(spawn_friendly_npc)
    await task_schedule(spawn_players)
    await task_schedule(default_player_friendly_eyes)
    await task_schedule(docking_standard_player_station)
    
    terrain_asteroid_clusters(terrain_value)
    terrain_spawn_nebula_clusters(terrain_value)
    terrain_spawn_pickups(upgrade_value)
    terrain_spawn_monsters(monster_value)
    terrain_spawn_black_holes(lethal_value)

    #------------------------------------------------------------------------------------------------------------
    # generate fleets

    # For Single Front and Double Front, one enemy is randomly chosen as the attacker, so all fleets will be chosen from that enemy.
    enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]
    enemy = random.choice(enemyTypeNameList)
    # enemy = enemy_temp[0]

    # Pick a random direction for the attacker, 1 = North, 2 = East, 3 = South, 4 = West
    rand_direction = random.randint(1,4)
    
    fleet_count = 3 + int(DIFFICULTY/2)
    fleet_index = int(DIFFICULTY - 1)

    # Ximni fleets are typically only one ship, so double fleets to balance this out until we code some better Ximni AI.
    if enemy == "Ximni":
        fleet_count = fleet_count*2 

    for a in range(fleet_count):
    #    fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
        if rand_direction == 1:
            fleet_pos = next(scatter_box(1, -40000, -1000, 40000, 40000, 1000, 50000))
        if rand_direction == 2:
            fleet_pos = next(scatter_box(1, 40000, -1000, 40000, 50000, 1000, -40000))
        if rand_direction == 3:
            fleet_pos = next(scatter_box(1, 40000, -1000, -40000, -40000, 1000, -50000))
        if rand_direction == 4:
            fleet_pos = next(scatter_box(1, -40000, -1000, 40000, -50000, 1000, -40000))

        print(f"Fleet Position: {fleet_pos.x} {fleet_pos.y} {fleet_pos.z}")

    #    create_npc_fleet_and_ships(enemy, fleet_quality, fleet_quality/3, fleet_pos.x, fleet_pos.y, fleet_pos.z)
        prefab_spawn(prefab_fleet_raider, {"race": enemy, "fleet_difficulty": DIFFICULTY,"START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})

    # At this time, keep the Skaraans out of a Single Front mission
    #    if a > 1 and DIFFICULTY > 2:
    #        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
    #        create_npc_fleet_and_ships("skaraan", 1,0, fleet_pos.x, fleet_pos.y, fleet_pos.z)
    


    #------------------------------------------------------------------------------------------------------------

    task_schedule(task_end_game)

    #------------------------------------------------------------------------------------------------------------


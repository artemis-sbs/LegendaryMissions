@map/siege "Siege"
" In this scenario, bases will be located in the center of the sector, 
" with minefields ringing the center, and enemies advancing from every 
" angle. Siege makes for a fast game, where stations are continually under threat.
metadata:``` yaml
Properties:
  Main:
    Player Ships: 'gui_int_slider("$text:int;low: 1.0;high:8.0;", var= "PLAYER_COUNT")'
    Difficulty: 'gui_int_slider("$text:int;low: 1.0;high:11.0;", var= "DIFFICULTY")'
  Map:
    Terrain: 'gui_drop_down("$text: {TERRAIN_SELECT};list: none, few, some, lots, max",var="TERRAIN_SELECT")'
    Lethal Terrain: 'gui_drop_down("$text: {LETHAL_SELECT};list: none, few, some, lots, max", var="LETHAL_SELECT")'
    Friendly Ships: 'gui_drop_down("$text: {FRIENDLY_SELECT};list: none, few, some, lots, max", var="FRIENDLY_SELECT")'
    Monsters: 'gui_drop_down("$text: {MONSTER_SELECT};list: none, few, some, lots, max", var="MONSTER_SELECT")'
    Upgrades: 'gui_drop_down("$text: {UPGRADE_SELECT};list: none, few, some, lots, max", var= "UPGRADE_SELECT")'
    Time Limit: 'gui_input("desc: Minutes;", var="GAME_TIME_LIMIT")'
```


    terrain_value = terrain_to_value(TERRAIN_SELECT)
    lethal_value =  terrain_to_value(LETHAL_SELECT)
    friendly_value = terrain_to_value(FRIENDLY_SELECT)
    monster_value = terrain_to_value(MONSTER_SELECT)
    upgrade_value = terrain_to_value(UPGRADE_SELECT)

    #------------------------------------------------------------------------------------------------------------

    terrain_spawn_stations(DIFFICULTY, lethal_value)
    await task_schedule(spawn_friendly_npc)
    await task_schedule(spawn_players)
    await task_schedule(default_player_friendly_eyes)
    await task_schedule(docking_standard_player_station)
    
    terrain_asteroid_clusters(terrain_value)
    terrain_spawn_nebula_clusters(terrain_value)
    terrain_spawn_pickups(upgrade_value)
    terrain_spawn_monsters(monster_value)
    terrain_spawn_black_holes(lethal_value)



    #------------------------------------------------------------------------------------------------------------
    # Generate Siege Fleets - These fleets are weighted towards Kraliens (based on DIFFICULTY), from 85% Kralien at DIFFICULTY 1 
    # to 22% Kralien at DIFFICULTY 10. The fleet lists can be found in 'map_common.py'. Skaraans are generated separately, as these 
    # 'independent contractors' tend to operate better on their own. The idea is to hopefully match the 'feel' of Artemis 2.x. 
    enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]

    diff_weight = [ [85, 5, 5, 5], [82, 6, 6, 6], [79, 7, 7, 7], [76, 8, 8, 8], [70, 10, 10, 10], [64, 12, 12, 12], [58, 14, 14, 14], [46, 18, 18, 18], [34, 22, 22, 22], [22, 26, 26, 26], [10, 30, 30, 30]]
    
    fleet_count = 3 + int(DIFFICULTY/2)
    fleet_index = int(DIFFICULTY - 1)

    for a in range(fleet_count):
        enemy_temp = random.choices(enemyTypeNameList, weights=diff_weight[fleet_index])
        enemy = enemy_temp[0]
        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
        prefab_spawn(prefab_fleet_raider, {"race": enemy, "fleet_difficulty": DIFFICULTY,"START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})
        if a > 1 and DIFFICULTY > 2:
            fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
            prefab_spawn(prefab_fleet_raider, {"race": "Skaraan", "fleet_difficulty": DIFFICULTY, "START_X": fleet_pos.x, "START_Y": fleet_pos.y, "START_Z": fleet_pos.z})

    #------------------------------------------------------------------------------------------------------------

    task_schedule(task_end_game)

    #------------------------------------------------------------------------------------------------------------


#
# Uncomment to enable logging via the log command
#
# logger(file="mast.log") #default to file
# logger(file="mast.log", std_err=True) #default to file and console
# logger() #default to console
# logger(var="fred") #default to variable
logger("mast:internal") #



shared START_TEXT = """
$t Mission Selection:

Select a mission type below then select start mission.
"""

#
# This directs the script 
# to the client and server GUI
# when the client is started
#
route_console_mainscreen_change(show_main_game_screen)
gui_reroute_server("start_server")
gui_reroute_clients("client_main")


#
# The Server GUI
#   This label runs once, to initialize server data
#
========== start_server ===============

    default shared SETTINGS = settings_get_defaults()
    shared WORLD_SELECT  = SETTINGS.get("WORLD_SELECT")
    shared TERRAIN_SELECT  = SETTINGS.get("TERRAIN_SELECT")
    shared LETHAL_SELECT  = SETTINGS.get("LETHAL_SELECT")
    shared FRIENDLY_SELECT  = SETTINGS.get("FRIENDLY_SELECT")
    shared MONSTER_SELECT  = SETTINGS.get("MONSTER_SELECT")
    shared UPGRADE_SELECT  = SETTINGS.get("UPGRADE_SELECT")
    shared seed_value  = SETTINGS.get("seed_value")
    shared GAME_STARTED  = SETTINGS.get("GAME_STARTED")
    shared GAME_ENDED  = SETTINGS.get("GAME_ENDED")
    shared GAME_TIME_LIMIT  = str(SETTINGS.get("GAME_TIME_LIMIT", ""))
    shared WAR_TIME_DELAY  = str(SETTINGS.get("WAR_TIME_DELAY", ""))
    shared DIFFICULTY=   SETTINGS.get("DIFFICULTY")
    shared PLAYER_CREATE_DEFAULT  = SETTINGS.get("PLAYER_CREATE_DEFAULT")
    shared PLAYER_COUNT  = SETTINGS.get("PLAYER_COUNT")
    shared PLAYER_LIST  =  SETTINGS.get("PLAYER_LIST")

    shared AUTO_START = SETTINGS.get("AUTO_START", False)

    shared OPERATOR_MODE = SETTINGS.get("OPERATOR_MODE", {"enable": False})
    shared OPERATOR_MODE_enabled = OPERATOR_MODE.get("enable", False)
    shared operator_show_logo_on_main = OPERATOR_MODE.get("show_logo_on_main", False)

    # This make it dependaent of Fleets
    #start_npc_cag()

    shared skybox = skybox_schedule_random()

    shared mission_index = 0
    shared mission_list = maps_get_list()
    shared mission_overview = maps_get_init()
    shared WORLD_SELECT_path  = SETTINGS.get("WORLD_SELECT")
    sim_create()
    # Create standard missile types
    sbs.set_shared_string("Homing","gui_text:Homing;  speed:10; lifetime:25; flare_color:white; trail_color:white;warhead:standard;damage:35; explosion_size:10;explosion_color:fire; behavior:homing; energy_conversion_value:100")
    sbs.set_shared_string("Nuke"  ,"gui_text:Nuke  ;  speed:10; lifetime:25; flare_color:white; trail_color:#99f;warhead:blast; blast_radius:1000; damage:5; explosion_size:20;explosion_color:fire; behavior:homing; energy_conversion_value:200")
    sbs.set_shared_string("EMP"   , "gui_text:EMP  ;  speed:10; lifetime:25; flare_color:yellow; trail_color:#99f;warhead:blast,reduce_shields; blast_radius:1000; damage:50; explosion_size:20;explosion_color:#11F; behavior:homing; energy_conversion_value:50")
    sbs.set_shared_string("Mine"  , "gui_text:Mine ;  speed:10; lifetime:25; flare_color:white; trail_color:white; warhead:blast; blast_radius:1000; damage:5; explosion_size:20; explosion_color:fire; behavior:mine; energy_conversion_value:200")

    #
    # Create all the player ships
    # 

    if PLAYER_CREATE_DEFAULT:
        for player_ship_data in PLAYER_LIST:
            player_ship = to_id(player_spawn(0,0,0, player_ship_data["name"], player_ship_data["side"], player_ship_data["ship"]))
            player_ship_data["id"] = player_ship
            add_role(player_ship, "default_player_ship")
            set_face(player_ship, random_face(player_ship_data["face"]))
            set_inventory_value(player_ship, "respawn_time", 5)
            signal_emit("create_player_ships", None)
    else:
        signal_emit("create_player_ships", None)
    #
    # Make sure the scan sources update system runs
    extra_scan_sources_schedule()

    # sim_pause()
    i = 0
    for m in mission_list:
        if m.path == WORLD_SELECT_path:
            mission_index = i
            break
        i += 1
    shared WORLD_SELECT = mission_list[mission_index]

    jump operator_main_screen if OPERATOR_MODE_enabled and operator_show_logo_on_main


#
# The Server GUI
#
====== show_server_menu =====
    #
    jump start if AUTO_START

    #
    # if there is a single mission or a map/__init__
    # Use it for the start text
    if mission_overview is not None:
        START_TEXT = """$t {mission_overview.display_name}:\n\n{mission_overview.desc}"""

    gui_section( style="area: 20px, 20px, 100, 210px;margin:0,0,10px,0;padding:10px,0;background:#1578;")
    gui_text_area(START_TEXT)

    # For using a seed value when randomly generating terrain, not currently implemented
    #row style="row-height:65px;"
    #"""justify:right;$text:Seed (Optional)"""
    #gui_input("""desc: Integer""", var="seed_value")

    rs= "row-height: 45px;margin:5px,5px,0,0;"
    ts= "row-height: 45px;col-width: 7em;margin:0,2px, 0,0;"

    gui_section(style="area: 50, 95-500px, 100, 95;margin:30px,0,10px,0;background:#1578;")
    #
    # Demo only has DIFFICULTY
    #
    #
    gui_property_list_box(name="Options")
    p = map_get_properties(WORLD_SELECT)
    
    if sbs.is_demo():
        p = """
Main:
    Difficulty: 'gui_int_slider("$text:int;low: 1.0;high:11.0", var="DIFFICULTY")'
"""

    gui_properties_set(p)


    gui_section(style="area: 20px, 95-500px, 50, 95;")
    mission_picker = gui_list_box(mission_list,"row-height: 7em; background:#1578;", item_template=main_mission_select_template, title_template=main_mission_select_title_template, select=True, carousel=True)
    # Initialize the selection to account for if we already have one
    mission_picker.set_selected_index(mission_index)

    WORLD_SELECT = mission_picker.get_value()

    on change mission_picker.get_selected_index():
        # This should be one thing, or None
        WORLD_SELECT = mission_picker.get_value()
        mission_index = mission_picker.get_selected_index()
        jump show_server_menu



    await gui():
        + "Start Mission":
            -> start



===== start ======
    # sim_create()
    sim_resume()
    #
    # Based on the game type call the right 
    # label to build the world
    #

    tl = safe_int(GAME_TIME_LIMIT)
    if tl >0:
        set_timer(SHARED, "time_limit", minutes=tl)

    #------------------------------------------------------------------------------------------------------------
    # Player = 7 points of damage, npc = a range 3.5 - 8.5 
    sbs.set_beam_damages(0, 7.0, (DIFFICULTY/2.0) + 3.0)


    if WORLD_SELECT is not None:
        task_schedule(WORLD_SELECT)

    #
    # Consoles are waiting to be started 
    #
    GAME_STARTED = True
    signal_emit("game_started", {})


    # Temp set this when first running
    shared SIM_STATE = "sim_unknown"

    PLAYER_LIST = sorted(to_object_list(role("__player__")), key=lambda p: p.id)
    if len(PLAYER_LIST)>0:
        sbs.assign_client_to_ship(0, PLAYER_LIST[0].id)
        
    gui_reroute_clients(game_started_console, exclude={client_id})
    #
    # This is very coupled to operator mode
    #
    # This is a remote
    if client_id != 0:
        gui_reroute_server(show_main_game_screen_server)
        gui_reroute_client(client_id, operator_stats)

=== show_main_game_screen_server
    ship_id = sbs.get_ship_of_client(client_id)
    link(ship_id,"consoles", client_id)
    add_role(client_id, "console, mainscreen")

=== show_main_game_screen === 

    # Just restate the console, it looks internally for the proper view
    # To override use gui_activate_console, and gui_widget_list
    # MAIN_SCREEN_VIEW variable has the view: 3d_view, info, data
    # MAIN_SCREEN_FACING has the facing right, left, front, back
    # MAIN_SCREEN_MODE is for 3d (first_person, chase, tracking) 2d (long, short)


    # This let the sim move the ships 
    # and avoid seeing some stuff be created 
    # at 0,0,0
    await delay_sim(0)
    # Find a valid ship
    ship_id = sbs.get_ship_of_client(client_id)

    gui_console("mainscreen")
    # link(ship_id,"consoles", client_id)
    # add_role(client_id, "console, mainscreen")



    ######################################
    resume_controls = gui_region("area: 5, 75, 95, 90;")

    with resume_controls:
        gui_text("$text: Simulation paused;font:gui-6;justify:center;")
        gui_row()

        mission = get_mission_name()
        start_mission = get_startup_mission_name()
        if start_mission is not None:
            same = mission == start_mission

        if start_mission is None:
            same = True
            start_mission = mission

        # if same only two buttons
        if same:
            gui_blank()

        b = gui_button("$text:Resume;justify:center;", style="padding:0,0,5px;")
        on gui_message(b):
            sim_resume()
            

        mission = get_mission_name()

        # start_mission
        if mission:
            b2 = gui_button("$text:restart {mission};justify:center;", style="padding:0,0,5px;")
            on gui_message(b2):
                sbs.run_next_mission(mission)

        if start_mission is not None and start_mission != mission and len(start_mission)>0:
            b3 = gui_button("$text:mission_select;justify:center;") # , style="padding:0,0,5px;")
            on gui_message(b3):
                sbs.run_next_mission(start_mission)

        # if same only two buttons
        if same:
            gui_blank()

    if SIM_STATE == "sim_running":
        gui_hide(resume_controls)

    on change SIM_STATE:
        if SIM_STATE == "sim_running":
            gui_hide(resume_controls)
        else:
            gui_show(resume_controls)
    ######################
    view = get_variable("MAIN_SCREEN_VIEW", "3d_view")
    facing = get_variable("MAIN_SCREEN_FACING", "front")
    mode = get_variable("MAIN_SCREEN_MODE", "chase")
    ###
    ### TODO: This is a fix for 
    ### Clients sending THEIR mode, not 
    ### This client's mode
    ### So this will ignore cinematic

    default my_mode = "chase"

    if mode == "cinematic":
        mode = my_mode
    else:
        my_mode = mode

    sbs.set_main_view_modes(client_id, view, facing, mode)

    await gui()





====  pause_screen ====
    jump operator_stats if OPERATOR_MODE_enabled

    gui_section( style="area: 5, 10, 50, 90;")
    """""Simulation paused"""""

    await gui():
    + "Resume Mission":
        sim_resume()

    jump pause_screen
    ##############



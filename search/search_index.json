{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Basic Legendary Missions","text":"<p>Legendary Missions is a mission script for Artemis: Cosmos</p> <p>Legendary Missions provides missions that should be similar to the out-of-the-box missions that were in Artemis: Spaceship Bridge Simulator.</p> <p>How to Play Understanding the code</p>"},{"location":"about/","title":"About","text":"<p>Legendary Missions is a mission script for Artemis: Cosmos</p> <p>It was written by:</p> <p>Doug Reichard Darrin Bright Mike Substelny and Thom Robertson</p> <p>The mission was created as part of the initial release of Artemis: Cosmos to test the engine. The goal is to provide a set of missions that match the out of the box missions provided by Artemis: Spaceship Bridge Simulator.</p> <p>It is written in a mixture of the Python and MAST Languages. </p> <p>It began as a Python. The Python Library sbs_utils was created to have a reusable python library.</p> <p>The MAST Language was then added as the main script on top of the sbs_utils library.</p> <p>MAST is a language that is similar to python in syntax, but provides:</p> <ul> <li>The Agent Model</li> <li>Managing running multiple task in parallel (in a single thread)</li> <li>Artemis: Cosmos specific functionality to:<ul> <li>Creating user interfaces</li> <li>Managing communications</li> <li>Managing Science</li> <li>Managing engineering communications</li> </ul> </li> </ul>"},{"location":"hosting/","title":"Hosting modes","text":"<p>The Legendary Missions can be configured to help automate startup, and help operators have more control over the startup.</p>"},{"location":"hosting/#artemis-cosmos-nearly-headless-mode","title":"Artemis Cosmos: Nearly headless mode","text":"<p>When running a Artemis Cosmos Server in some scenarios e.g. cloud based servers, it is often desired run in a headless mode.</p> <p>Artemis Cosmos still runs in a grapical manner, however there are now options to simplify the running a remote server.</p>"},{"location":"hosting/#preference-default_mission_folder","title":"Preference: default_mission_folder","text":"<p>In the Artemis Cosmos data directory there is a file *preferences.json\". In this file there is a setting to automatically start a mission when the artemis executable runs: default_mission_folder.</p> <p>By uncommenting and setting this value it will run in server mode the specified mission.</p> <p>For example:</p> <pre><code>\"default_mission_folder\":  \"LegendaryLissions\"\n</code></pre> <p>Will run the the Legendary Mission on startup.</p>"},{"location":"hosting/#remote-mission-picker","title":"Remote mission picker","text":"<p>There is also a mission script to present the mission picker remotely.</p> <p>If you do not have it, it can be obtained my opening a command line in the missions folder and typing:</p> <pre><code>.\\fetch artemis-sbs remote_mission_pick\n</code></pre> <p>You must have an internet connection for this. The fetch command retrieves missions from github.</p> <p>Alternatively you can get the mission from github.</p> <p>Mission on github</p>"},{"location":"hosting/#setupjson","title":"setup.json","text":"<p>The Legendary Missions has a setup.json file. This file can set the default starting values as well as enable operator mode.</p> <p>To enable operator mode, a 'nearly headless' operation for LegendaryMissions, set the operator mode enable to true.</p> <p>With operator mode turned on, a client console can act as the mission startup settings screen and it also has some useful things for operators.</p> <pre><code>\"operator_mode\": {\n        \"enable\": true,\n        \"logo\": \"media/operator\",\n        \"remote_console_select\": true,\n        \"pin\": \"000000\"\n    },\n</code></pre> <p>see here  for more settings.</p>"},{"location":"hosting/setup.json/","title":"setup.json","text":"<p>A file that can be used to set the default operating settings for Legendary Missions</p>"},{"location":"hosting/setup.json/#auto_start","title":"auto_start","text":"<p>This will skip startup selection and start the mission as soon as it is selected.</p>"},{"location":"hosting/setup.json/#operator_mode","title":"operator_mode","text":""},{"location":"hosting/setup.json/#enable","title":"enable","text":"<p>set \"true\" to enable the operator mode. \"false\" to disable</p>"},{"location":"hosting/setup.json/#logo","title":"logo","text":"<p>You can set an image file to display one the server screen. Useful for operators.</p>"},{"location":"hosting/setup.json/#remote_console_select","title":"remote_console_select","text":"<p>For future use</p>"},{"location":"hosting/setup.json/#pin","title":"pin","text":"<p>string need to be typed to gain access to the operator and startup screen</p>"},{"location":"hosting/setup.json/#default-selections","title":"Default selections","text":"<p>You set the default selection values for the startup settings screen.</p>"},{"location":"hosting/setup.json/#players_count","title":"players_count","text":"<p>1 to the number of ships in the player ship list</p>"},{"location":"hosting/setup.json/#difficulty","title":"difficulty","text":"<p>1-11</p>"},{"location":"hosting/setup.json/#world_select","title":"world_select","text":"<p>siege is the only valid selection currently</p>"},{"location":"hosting/setup.json/#terrain_select","title":"terrain_select","text":"<p>none, few, some, lots, many</p>"},{"location":"hosting/setup.json/#lethal_select","title":"lethal_select","text":"<p>none, few, some, lots, many</p>"},{"location":"hosting/setup.json/#friendly_select","title":"friendly_select","text":"<p>none, few, some, lots, many</p>"},{"location":"hosting/setup.json/#monster_select","title":"monster_select","text":"<p>none, few, some, lots, many</p>"},{"location":"hosting/setup.json/#upgrade_select","title":"upgrade_select","text":"<p>none, few, some, lots, many</p>"},{"location":"hosting/setup.json/#game_time_limit","title":"game_time_limit","text":"<p>0 is unlimited any other values is the number of minutes the mission will last. Pausing the mission will also pause this timer.</p>"},{"location":"hosting/setup.json/#player_ships","title":"player_ships","text":"<p>A list of Player ships names, side and hull keys You could add or reduce the number of options. e.g. Operators may Only want one player ship.</p>"},{"location":"playing/updating/","title":"Updating","text":""},{"location":"playing/updating/#fetching","title":"Fetching","text":"<p>Talk about using the fetch to get updates and bugfixes in between releases of Artemis: Cosmos</p>"},{"location":"script/","title":"The mission startup","text":"<p>All Artemis: Cosmos Missions start by running script.py. Without reusable code, the scripter would need to write code to listen for al the events the engine fires to the script side.</p> <p>This section begins to tell how BasicSiege runs from this startup script.py.</p>"},{"location":"script/#scriptpy-startup","title":"script.py startup","text":"<p>The scripy.py for BasicSiege leverages the sbs_utils library and MAST Runtime. The following code is added to load the library and it adds functons that implement things to handle the events from the engine.</p>  Python <pre><code>import sbslibs\nfrom  sbs_utils.handlerhooks import *\n</code></pre> <p>The sbs_utils library library adds several high level systems over the Artemis: Cosmos engine to hopefully make scripters more productive and focus on the mission scripting, rather than needing a wealth of programming experience. Scripters can focus on These systems are used to build the MAST Runtime which can be used from both Python and the MAST scripting language.</p>"},{"location":"script/#bootstrapping-the-mast-runtime","title":"Bootstrapping the MAST runtime","text":"<p>Basic Seige is written using both the scripting language, with several procedural function written in Python. In general reusable functions are written in python, and the script flow leverages MAST.</p> <p>Leverage the library makes script.py a small file that creates a StoryPage, and setting the startup MAST file story.mast to run.</p>  Python <pre><code>class MyStoryPage(StoryPage):\n    story_file = \"story.mast\"\n</code></pre> <p>Using the Gui system of sbs_utils the StoryPage class to be used for both server and client consoles. The server and each client create a gui Page, and start the story.mast main label. </p>  Python <pre><code>Gui.server_start_page_class(MyStoryPage)\nGui.client_start_page_class(MyStoryPage)\n</code></pre> <p>The code essentially is more configuration than code. But by configuring the system in this manner the server and clients can run opening up a Gui Page for drawing the content on the users see on the screen.</p> <p>For BasicSiege these gui screen are code using code in story.mast</p>"},{"location":"script/#starting-storymast-and-running-the-main-label","title":"Starting story.mast and running the main label","text":"<p>The server and each client creates their own Gui page (StoryPage). Each page creates a MAST Task that runs story.mast. A task is a execution unit in MAST that runs script. The MAST runtime manages all the running Tasks in the system.</p> <pre><code>stateDiagram-v2\nstate fork_state \n\nstate \"server\" as srv\nstate \"client 1\" as c1\nstate \"client ...\" as cn\nstate \"MAST runtime\" as m\n\n    script.py --&gt; story.mast\n    story.mast --&gt; m\n\n    state m {\n    srv\n    --\n    c1\n    --\n    cn\n    }\n</code></pre> <p>The very first thing story.mast mast runs in each task is the main label.</p> <p>All content prior to the first label in a MAST file in referred to as the main label. </p> What is a Label <p>A label is a section of code in a mast file. Labels can be used as a heading, and can be used to redirect code to that point in the code i.e. the code can jump to a label rerouting the code to that point.</p> <p>Labels are denoted by 3 or more equals signs followed by a name followed by 3 or more equal signs. names are letter, numbers, or underscores no spaces, but spaces can be before or after the name.</p>  MAST <pre><code># Code before the first label is in \"main\"\n\n===== my_label ====\n# The label code\n</code></pre> <p>All files imported, will have their own main label's code merged into a single main label.</p> Imports <p>imports are a way to include code from other files. In this way you can break your script into smaller chucks for organization, and reuse possibilities.</p> <p>Imported files are imported in order they occur in listed, and the files they imported are import with them. However, if a file that has been imported already it will not be imported again.</p> <p>Imports in mast are in the main label area of a file. An import statement can import MAST code or python code.</p>  MAST <pre><code>include basic_ai.mast\ninclude map.mast\ninclude upgrade.py\ninclude upgrade.mast\n</code></pre> <p>The main label runs for the server and each client. However, the assignment of shared data is only run on the server to avoid resetting the data whenever a client console connects.</p> what is shared data <p>Share data is by server and all clients reference thee same value In the main label the assigning of these values only runs once</p> <p>Data that is not shared, the server and all client have their own version of the variable.</p>  MAST <pre><code># Shared by server and all clients\nshared difficulty=5\nshared player_count = 1\n# Unique for each client + server\nuser_name = \"Player\"\nconsole_name = \"helm\"\n</code></pre> <p>When the main label ends, it then route to the server or client gui. The label it jumps to is set via the gui_reroute_server or gui_reroute_clients functions. These functions take a label to run when main completes. </p>  MAST <pre><code>gui_reroute_server(\"start_server\")\ngui_reroute_clients(\"client_main\")\n</code></pre> <p>If their is no gui reroute, then the main label will execute the first label in the main file (story.mast) as is customary for labels the continue through labels they encounter the labels is said it falls through to the next label.</p> Label fall through <p>The below example will print A and B when a_label executes because it falls through and runs b_label.</p>  MAST <pre><code>==== a_label ===\nprint(\"A\")\n\n==== b_label ===\nprint(\"B\")\n</code></pre> <p>Remove this its examples to copy from</p>  Python Cmd-line  MAST <pre><code>import sbslibs\nfrom  sbs_utils.handlerhooks import *\n</code></pre> <pre><code>import sbslibs\nfrom  sbs_utils.handlerhooks import *\n</code></pre> <pre><code>import sbslibs\nfrom  sbs_utils.handlerhooks import *\n</code></pre>"},{"location":"script/ai/","title":"AI in Legendary Missions","text":"<p>There are several areas that need to have NPC Agents to have behavior.</p> <p>The various npc ships: raiders, friendly, civilian, stations. As well the npcs in Engineering: damcons, etc.</p> <p>The AI wi be described in this section.</p> <pre><code>stateDiagram-v2\n    [*] --&gt; handle_route_spawn\n    state route &lt;&lt;choice&gt;&gt;\n    handle_route_spawn --&gt; route\n        route --&gt; ai_player: if has_role(\"__player__\")\n        route --&gt; ai_task_friendly: if has_roles(\"tsn, friendly\")\n        route --&gt; spawn_task_station: if has_roles(\"tsn, station\")\n        route --&gt; raider_start: if has_role(\"raider\") \n</code></pre>"},{"location":"script/ai/civilian/","title":"civilian","text":"<ul> <li>Describe  <ul> <li>the give orders logic</li> <li>the initial science scan</li> </ul> </li> </ul>"},{"location":"script/ai/friendly/","title":"friendly","text":"<ul> <li>Describe  <ul> <li>the give orders logic</li> <li>the initial science scan</li> </ul> </li> </ul> <p>keep separate from civilian because it may change over time to be different</p>"},{"location":"script/ai/raider/","title":"Enemy (Raider) AI","text":""},{"location":"script/ai/raider/#legendary-missions-ai","title":"Legendary Missions AI","text":"<p>The enemy AI in a Legendary Missions Map is defined in </p> <p></p> <p> </p> <p>Example</p>  mast doc1.md <pre><code>if bar():\n    \"\"\"Hello, world!\n\n    # Tips\n\n    - Stay hydrated.\n    \"\"\"\n</code></pre> <pre><code>::: foo.bar\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"script/ai/station/","title":"Station AI","text":""},{"location":"script/ai/station/#munition-building","title":"Munition building","text":""},{"location":"script/ai/station/#docking","title":"Docking","text":""},{"location":"script/gui/server/","title":"The server startup","text":"<p>On the sever, the start_server label is called after the main label.</p>"},{"location":"script/pickups/upgrades/","title":"Index","text":"<p>Should cross reference wreck het too</p>"}]}